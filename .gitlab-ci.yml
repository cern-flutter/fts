stages:
    - build
    - image


before_script:
    - curl -fsSLO https://get.docker.com/builds/Linux/x86_64/docker-1.11.2.tgz && tar --strip-components=1 -xvzf docker-1.11.2.tgz -C /usr/local/bin
    - mkdir -p ${GOPATH}/src/gitlab.cern.ch/flutter/
    - ln -s `pwd` ${GOPATH}/src/gitlab.cern.ch/flutter/fts
    - cd ${GOPATH}/src/gitlab.cern.ch/flutter/fts/
    - git remote set-url origin https://gitlab.cern.ch/flutter/fts.git
#    - docker login -p "${REGISTRY_PASSWD}" -u "${REGISTRY_USER}" "${CI_REGISTRY}"
after_script:
    - docker logout "${CI_REGISTRY}"


build-schedd:
  image: golang:onbuild
  stage: build
  script:
    - cd schedd
    - go get -v
    - go build -v
    - docker build --pull --no-cache=true --rm=true -t "${CI_REGISTRY_IMAGE}:schedd" .
    - docker push "${CI_REGISTRY_IMAGE}:schedd"

build-optimizerd:
  image: golang:onbuild
  stage: build
  script:
    - cd optimizerd
    - go get -v
    - go build -v
    - docker build --pull --no-cache=true --rm=true -t "${CI_REGISTRY_IMAGE}:optimizerd" .
    - docker push "${CI_REGISTRY_IMAGE}:optimizerd"

build-stagerd:
  image: golang:onbuild
  stage: build
  script:
    - cd stagerd
    - go get -v
    - go build -v
    - docker build --pull --no-cache=true --rm=true -t "${CI_REGISTRY_IMAGE}:stagerd" .
    - docker push "${CI_REGISTRY_IMAGE}:stagerd"

build-stored:
  image: golang:onbuild
  stage: build
  script:
    - cd stored
    - go get -v
    - go build -v
    - docker build --pull --no-cache=true --rm=true -t "${CI_REGISTRY_IMAGE}:stored" .
    - docker push "${CI_REGISTRY_IMAGE}:stored"

build-workerd:
  image: gitlab-registry.cern.ch/dmc/gfal2
  stage: build
  script:
    - yum install -y golang
    - export GOPATH=/
    - cd worker
    - cd url-copy
    - go get -v
    - go build -v
    - cd ../workerd
    - go get -v
    - go build -v
    - cd ..
    - docker build --pull --no-cache=true --rm=true -t "${CI_REGISTRY_IMAGE}:workerd" .
    - docker push "${CI_REGISTRY_IMAGE}:workerd"
