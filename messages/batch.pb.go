// Code generated by protoc-gen-go.
// source: batch.proto
// DO NOT EDIT!

/*
Package messages is a generated protocol buffer package.

It is generated from these files:
	batch.proto
	interval.proto
	kill.proto
	perf_marker.proto
	transfer.proto
	transfer_status.proto

It has these top-level messages:
	Batch
	Interval
	Kill
	PerformanceMarker
	TransferParameters
	Transfer
	TransferError
	TransferIntervals
	TransferRunStatistics
	TransferInfo
*/
package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Batch_State int32

const (
	Batch_STAGING   Batch_State = 0
	Batch_SUBMITTED Batch_State = 1
	Batch_READY     Batch_State = 2
	Batch_RUNNING   Batch_State = 3
	Batch_DONE      Batch_State = 4
)

var Batch_State_name = map[int32]string{
	0: "STAGING",
	1: "SUBMITTED",
	2: "READY",
	3: "RUNNING",
	4: "DONE",
}
var Batch_State_value = map[string]int32{
	"STAGING":   0,
	"SUBMITTED": 1,
	"READY":     2,
	"RUNNING":   3,
	"DONE":      4,
}

func (x Batch_State) String() string {
	return proto.EnumName(Batch_State_name, int32(x))
}
func (Batch_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// Batch contains a set of transfer that form a logical unit of work
type Batch struct {
	// Submission timestamp, used for scheduling
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	State     Batch_State                `protobuf:"varint,2,opt,name=state,enum=messages.Batch_State" json:"state,omitempty"`
	Transfers []*Transfer                `protobuf:"bytes,3,rep,name=transfers" json:"transfers,omitempty"`
	// Identify the user's credentials
	CredId string `protobuf:"bytes,4,opt,name=cred_id,json=credId" json:"cred_id,omitempty"`
	// Keys used for scheduling
	SourceSe string `protobuf:"bytes,5,opt,name=source_se,json=sourceSe" json:"source_se,omitempty"`
	DestSe   string `protobuf:"bytes,6,opt,name=dest_se,json=destSe" json:"dest_se,omitempty"`
	Vo       string `protobuf:"bytes,7,opt,name=vo" json:"vo,omitempty"`
	Activity string `protobuf:"bytes,8,opt,name=activity" json:"activity,omitempty"`
	Priority uint32 `protobuf:"varint,9,opt,name=priority" json:"priority,omitempty"`
}

func (m *Batch) Reset()                    { *m = Batch{} }
func (m *Batch) String() string            { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()               {}
func (*Batch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Batch) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Batch) GetState() Batch_State {
	if m != nil {
		return m.State
	}
	return Batch_STAGING
}

func (m *Batch) GetTransfers() []*Transfer {
	if m != nil {
		return m.Transfers
	}
	return nil
}

func (m *Batch) GetCredId() string {
	if m != nil {
		return m.CredId
	}
	return ""
}

func (m *Batch) GetSourceSe() string {
	if m != nil {
		return m.SourceSe
	}
	return ""
}

func (m *Batch) GetDestSe() string {
	if m != nil {
		return m.DestSe
	}
	return ""
}

func (m *Batch) GetVo() string {
	if m != nil {
		return m.Vo
	}
	return ""
}

func (m *Batch) GetActivity() string {
	if m != nil {
		return m.Activity
	}
	return ""
}

func (m *Batch) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func init() {
	proto.RegisterType((*Batch)(nil), "messages.Batch")
	proto.RegisterEnum("messages.Batch_State", Batch_State_name, Batch_State_value)
}

func init() { proto.RegisterFile("batch.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x44, 0x90, 0xc1, 0x6b, 0xfa, 0x30,
	0x14, 0xc7, 0x7f, 0xad, 0x56, 0x9b, 0x57, 0x94, 0x12, 0xf8, 0xb1, 0xd0, 0x1d, 0x56, 0x3c, 0x15,
	0x06, 0x71, 0xb8, 0xcb, 0xae, 0x8a, 0x45, 0x3c, 0xac, 0x83, 0xb4, 0x1e, 0x76, 0x92, 0xda, 0x46,
	0x57, 0x98, 0x8b, 0x24, 0x51, 0xd8, 0x3f, 0x3f, 0x46, 0x9a, 0x55, 0x8f, 0xdf, 0xf7, 0xf9, 0x7c,
	0x1f, 0x2f, 0x81, 0x60, 0x57, 0xea, 0xea, 0x83, 0x9e, 0xa4, 0xd0, 0x02, 0xfb, 0x47, 0xae, 0x54,
	0x79, 0xe0, 0x2a, 0x1a, 0x6b, 0x59, 0x7e, 0xa9, 0x3d, 0x97, 0x96, 0x44, 0x0f, 0x07, 0x21, 0x0e,
	0x9f, 0x7c, 0xda, 0xa6, 0xdd, 0x79, 0x3f, 0xd5, 0xcd, 0x91, 0x2b, 0x5d, 0x1e, 0x4f, 0x56, 0x98,
	0xfc, 0xb8, 0xe0, 0x2d, 0xcc, 0x2a, 0xfc, 0x02, 0xe8, 0x0a, 0x89, 0x13, 0x3b, 0x49, 0x30, 0x8b,
	0xa8, 0xad, 0xd3, 0xae, 0x4e, 0x8b, 0xce, 0x60, 0x37, 0x19, 0x3f, 0x82, 0xa7, 0x74, 0xa9, 0x39,
	0x71, 0x63, 0x27, 0x19, 0xcf, 0xfe, 0xd3, 0xee, 0x1c, 0xda, 0x6e, 0xa6, 0xb9, 0x81, 0xcc, 0x3a,
	0xf8, 0x09, 0x50, 0x77, 0xa3, 0x22, 0xbd, 0xb8, 0x97, 0x04, 0x33, 0x7c, 0x2b, 0x14, 0x7f, 0x88,
	0xdd, 0x24, 0x7c, 0x07, 0xc3, 0x4a, 0xf2, 0x7a, 0xdb, 0xd4, 0xa4, 0x1f, 0x3b, 0x09, 0x62, 0x03,
	0x13, 0xd7, 0x35, 0xbe, 0x07, 0xa4, 0xc4, 0x59, 0x56, 0x7c, 0xab, 0x38, 0xf1, 0x5a, 0xe4, 0xdb,
	0x41, 0xce, 0x4d, 0xab, 0xe6, 0x4a, 0x1b, 0x34, 0xb0, 0x2d, 0x13, 0x73, 0x8e, 0xc7, 0xe0, 0x5e,
	0x04, 0x19, 0xb6, 0x33, 0xf7, 0x22, 0x70, 0x04, 0x7e, 0x59, 0xe9, 0xe6, 0xd2, 0xe8, 0x6f, 0xe2,
	0xdb, 0x25, 0x5d, 0x36, 0xec, 0x24, 0x1b, 0x21, 0x0d, 0x43, 0xb1, 0x93, 0x8c, 0xd8, 0x35, 0x4f,
	0x52, 0xf0, 0xda, 0x87, 0xe1, 0x00, 0x86, 0x79, 0x31, 0x5f, 0xad, 0xb3, 0x55, 0xf8, 0x0f, 0x8f,
	0x00, 0xe5, 0x9b, 0xc5, 0xeb, 0xba, 0x28, 0xd2, 0x65, 0xe8, 0x60, 0x04, 0x1e, 0x4b, 0xe7, 0xcb,
	0xf7, 0xd0, 0x35, 0x1a, 0xdb, 0x64, 0x99, 0xd1, 0x7a, 0xd8, 0x87, 0xfe, 0xf2, 0x2d, 0x4b, 0xc3,
	0xfe, 0x6e, 0xd0, 0xfe, 0xed, 0xf3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x29, 0x78, 0x2d,
	0xd1, 0x01, 0x00, 0x00,
}
