// Code generated by protoc-gen-go.
// source: transfer_status.proto
// DO NOT EDIT!

package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TransferError_Scope int32

const (
	TransferError_UNKNOWN     TransferError_Scope = 0
	TransferError_SOURCE      TransferError_Scope = 1
	TransferError_DESTINATION TransferError_Scope = 2
	TransferError_TRANSFER    TransferError_Scope = 3
	TransferError_AGENT       TransferError_Scope = 4
)

var TransferError_Scope_name = map[int32]string{
	0: "UNKNOWN",
	1: "SOURCE",
	2: "DESTINATION",
	3: "TRANSFER",
	4: "AGENT",
}
var TransferError_Scope_value = map[string]int32{
	"UNKNOWN":     0,
	"SOURCE":      1,
	"DESTINATION": 2,
	"TRANSFER":    3,
	"AGENT":       4,
}

func (x TransferError_Scope) String() string {
	return proto.EnumName(TransferError_Scope_name, int32(x))
}
func (TransferError_Scope) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 0} }

// TransferError holds details about a transfer error
type TransferError struct {
	Scope       TransferError_Scope `protobuf:"varint,1,opt,name=scope,enum=messages.TransferError_Scope" json:"scope,omitempty"`
	Code        int32               `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Description string              `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Recoverable bool                `protobuf:"varint,4,opt,name=recoverable" json:"recoverable,omitempty"`
}

func (m *TransferError) Reset()                    { *m = TransferError{} }
func (m *TransferError) String() string            { return proto.CompactTextString(m) }
func (*TransferError) ProtoMessage()               {}
func (*TransferError) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *TransferError) GetScope() TransferError_Scope {
	if m != nil {
		return m.Scope
	}
	return TransferError_UNKNOWN
}

func (m *TransferError) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TransferError) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TransferError) GetRecoverable() bool {
	if m != nil {
		return m.Recoverable
	}
	return false
}

// TransferIntervals holds details about the time it took each stage
type TransferIntervals struct {
	Total          *Interval            `protobuf:"bytes,1,opt,name=total" json:"total,omitempty"`
	Transfer       *Interval            `protobuf:"bytes,2,opt,name=transfer" json:"transfer,omitempty"`
	SourceChecksum *Interval            `protobuf:"bytes,3,opt,name=source_checksum,json=sourceChecksum" json:"source_checksum,omitempty"`
	DestChecksum   *Interval            `protobuf:"bytes,4,opt,name=dest_checksum,json=destChecksum" json:"dest_checksum,omitempty"`
	Extra          map[string]*Interval `protobuf:"bytes,5,rep,name=extra" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TransferIntervals) Reset()                    { *m = TransferIntervals{} }
func (m *TransferIntervals) String() string            { return proto.CompactTextString(m) }
func (*TransferIntervals) ProtoMessage()               {}
func (*TransferIntervals) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *TransferIntervals) GetTotal() *Interval {
	if m != nil {
		return m.Total
	}
	return nil
}

func (m *TransferIntervals) GetTransfer() *Interval {
	if m != nil {
		return m.Transfer
	}
	return nil
}

func (m *TransferIntervals) GetSourceChecksum() *Interval {
	if m != nil {
		return m.SourceChecksum
	}
	return nil
}

func (m *TransferIntervals) GetDestChecksum() *Interval {
	if m != nil {
		return m.DestChecksum
	}
	return nil
}

func (m *TransferIntervals) GetExtra() map[string]*Interval {
	if m != nil {
		return m.Extra
	}
	return nil
}

// TransferRunStatistics holds details about a transfer execution
type TransferRunStatistics struct {
	Throughput  float32            `protobuf:"fixed32,1,opt,name=throughput" json:"throughput,omitempty"`
	Transferred uint64             `protobuf:"varint,2,opt,name=transferred" json:"transferred,omitempty"`
	Intervals   *TransferIntervals `protobuf:"bytes,3,opt,name=intervals" json:"intervals,omitempty"`
}

func (m *TransferRunStatistics) Reset()                    { *m = TransferRunStatistics{} }
func (m *TransferRunStatistics) String() string            { return proto.CompactTextString(m) }
func (*TransferRunStatistics) ProtoMessage()               {}
func (*TransferRunStatistics) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *TransferRunStatistics) GetThroughput() float32 {
	if m != nil {
		return m.Throughput
	}
	return 0
}

func (m *TransferRunStatistics) GetTransferred() uint64 {
	if m != nil {
		return m.Transferred
	}
	return 0
}

func (m *TransferRunStatistics) GetIntervals() *TransferIntervals {
	if m != nil {
		return m.Intervals
	}
	return nil
}

// TransferInfo holds the specific status of a transfer during the whole process chain
type TransferInfo struct {
	Error   *TransferError         `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Message string                 `protobuf:"bytes,2,opt,name=Message,json=message" json:"Message,omitempty"`
	Stats   *TransferRunStatistics `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
	LogFile string                 `protobuf:"bytes,4,opt,name=log_file,json=logFile" json:"log_file,omitempty"`
}

func (m *TransferInfo) Reset()                    { *m = TransferInfo{} }
func (m *TransferInfo) String() string            { return proto.CompactTextString(m) }
func (*TransferInfo) ProtoMessage()               {}
func (*TransferInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *TransferInfo) GetError() *TransferError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *TransferInfo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TransferInfo) GetStats() *TransferRunStatistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *TransferInfo) GetLogFile() string {
	if m != nil {
		return m.LogFile
	}
	return ""
}

func init() {
	proto.RegisterType((*TransferError)(nil), "messages.TransferError")
	proto.RegisterType((*TransferIntervals)(nil), "messages.TransferIntervals")
	proto.RegisterType((*TransferRunStatistics)(nil), "messages.TransferRunStatistics")
	proto.RegisterType((*TransferInfo)(nil), "messages.TransferInfo")
	proto.RegisterEnum("messages.TransferError_Scope", TransferError_Scope_name, TransferError_Scope_value)
}

func init() { proto.RegisterFile("transfer_status.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x93, 0xcb, 0x6e, 0xda, 0x40,
	0x14, 0x86, 0x3b, 0x80, 0x03, 0x3e, 0x24, 0xc4, 0x3d, 0x52, 0x54, 0x37, 0x55, 0x5b, 0x8b, 0x45,
	0xe5, 0x4d, 0xbd, 0x20, 0xaa, 0x7a, 0xdd, 0xa0, 0xd4, 0xa9, 0xe8, 0xc5, 0x48, 0x03, 0x51, 0x97,
	0xc8, 0x31, 0x03, 0x58, 0x71, 0x3c, 0x68, 0x66, 0x8c, 0x9a, 0xf7, 0xe8, 0x4b, 0xf4, 0xcd, 0xba,
	0xeb, 0x2b, 0x54, 0x1e, 0xdb, 0x98, 0x28, 0x97, 0xdd, 0xe8, 0xf8, 0xfb, 0x7d, 0xe6, 0xff, 0xe7,
	0x1c, 0x38, 0x52, 0x22, 0x4c, 0xe5, 0x82, 0x89, 0x99, 0x54, 0xa1, 0xca, 0xa4, 0xb7, 0x16, 0x5c,
	0x71, 0xec, 0x5c, 0x31, 0x29, 0xc3, 0x25, 0x93, 0xc7, 0xbd, 0x38, 0x55, 0x4c, 0x6c, 0xc2, 0xa4,
	0xf8, 0xd2, 0xff, 0x4b, 0xe0, 0x60, 0x5a, 0x6a, 0x7c, 0x21, 0xb8, 0xc0, 0x13, 0x30, 0x64, 0xc4,
	0xd7, 0xcc, 0x26, 0x0e, 0x71, 0x7b, 0x83, 0xe7, 0x5e, 0xa5, 0xf5, 0x6e, 0x70, 0xde, 0x24, 0x87,
	0x68, 0xc1, 0x22, 0x42, 0x2b, 0xe2, 0x73, 0x66, 0x37, 0x1c, 0xe2, 0x1a, 0x54, 0x9f, 0xd1, 0x81,
	0xee, 0x9c, 0xc9, 0x48, 0xc4, 0x6b, 0x15, 0xf3, 0xd4, 0x6e, 0x3a, 0xc4, 0x35, 0xe9, 0x6e, 0x29,
	0x27, 0x04, 0x8b, 0xf8, 0x86, 0x89, 0xf0, 0x22, 0x61, 0x76, 0xcb, 0x21, 0x6e, 0x87, 0xee, 0x96,
	0xfa, 0x5f, 0xc1, 0xd0, 0x7d, 0xb0, 0x0b, 0xed, 0xf3, 0xe0, 0x5b, 0x30, 0xfe, 0x19, 0x58, 0x8f,
	0x10, 0x60, 0x6f, 0x32, 0x3e, 0xa7, 0xa7, 0xbe, 0x45, 0xf0, 0x10, 0xba, 0x9f, 0xfd, 0xc9, 0x74,
	0x14, 0x0c, 0xa7, 0xa3, 0x71, 0x60, 0x35, 0x70, 0x1f, 0x3a, 0x53, 0x3a, 0x0c, 0x26, 0x67, 0x3e,
	0xb5, 0x9a, 0x68, 0x82, 0x31, 0xfc, 0xe2, 0x07, 0x53, 0xab, 0xd5, 0xff, 0xd7, 0x80, 0xc7, 0x95,
	0x85, 0x51, 0x99, 0x82, 0x44, 0x17, 0x0c, 0xc5, 0x55, 0x98, 0x68, 0xbb, 0xdd, 0x01, 0xd6, 0x76,
	0x2b, 0x86, 0x16, 0x00, 0x7a, 0xd0, 0xa9, 0xd2, 0xd5, 0x3e, 0xef, 0x86, 0xb7, 0x0c, 0x7e, 0x84,
	0x43, 0xc9, 0x33, 0x11, 0xb1, 0x59, 0xb4, 0x62, 0xd1, 0xa5, 0xcc, 0xae, 0x74, 0x06, 0x77, 0xcb,
	0x7a, 0x05, 0x7a, 0x5a, 0x92, 0xf8, 0x16, 0x0e, 0xe6, 0x4c, 0xaa, 0x5a, 0xda, 0xba, 0x57, 0xba,
	0x9f, 0x83, 0x5b, 0xe1, 0x27, 0x30, 0xd8, 0x2f, 0x25, 0x42, 0xdb, 0x70, 0x9a, 0x6e, 0x77, 0xf0,
	0xea, 0xf6, 0xf3, 0x6d, 0xbd, 0x7b, 0x7e, 0x0e, 0xfa, 0xa9, 0x12, 0xd7, 0xb4, 0x10, 0x1d, 0x7f,
	0x07, 0xa8, 0x8b, 0x68, 0x41, 0xf3, 0x92, 0x5d, 0xeb, 0x64, 0x4c, 0x9a, 0x1f, 0xf3, 0xb4, 0x36,
	0x61, 0x92, 0xb1, 0x07, 0x02, 0x28, 0x80, 0x0f, 0x8d, 0x77, 0xa4, 0xff, 0x9b, 0xc0, 0x51, 0xd5,
	0x95, 0x66, 0xe9, 0x44, 0x85, 0x2a, 0x96, 0x2a, 0x8e, 0x24, 0xbe, 0x00, 0x50, 0x2b, 0xc1, 0xb3,
	0xe5, 0x6a, 0x9d, 0x29, 0xdd, 0xa0, 0x41, 0x77, 0x2a, 0xf9, 0x64, 0x54, 0x39, 0x0a, 0x36, 0xd7,
	0xdd, 0x5a, 0x74, 0xb7, 0x84, 0xef, 0xc1, 0xac, 0x46, 0x59, 0x96, 0xb9, 0x3e, 0x7b, 0xc0, 0x2b,
	0xad, 0xe9, 0xfe, 0x1f, 0x02, 0xfb, 0x35, 0xb0, 0xe0, 0xf8, 0x1a, 0x0c, 0x96, 0xcf, 0x74, 0x39,
	0x03, 0x4f, 0xee, 0x19, 0x79, 0x5a, 0x50, 0x68, 0x43, 0xfb, 0x47, 0x01, 0xe8, 0x8b, 0x99, 0xb4,
	0x5d, 0xf2, 0xf8, 0x06, 0x8c, 0x7c, 0xef, 0xaa, 0x0b, 0xbd, 0xbc, 0xfd, 0xa3, 0x1b, 0x31, 0xd0,
	0x82, 0xc6, 0xa7, 0xd0, 0x49, 0xf8, 0x72, 0xb6, 0x88, 0xcb, 0x25, 0x30, 0x69, 0x3b, 0xe1, 0xcb,
	0xb3, 0x38, 0x61, 0x17, 0x7b, 0x7a, 0x4d, 0x4f, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xf3,
	0x14, 0x10, 0xd9, 0x03, 0x00, 0x00,
}
