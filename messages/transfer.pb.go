// Code generated by protoc-gen-go.
// source: transfer.proto
// DO NOT EDIT!

package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Checksum mode
type TransferParameters_ChecksumMode int32

const (
	TransferParameters_NONE    TransferParameters_ChecksumMode = 0
	TransferParameters_SOURCE  TransferParameters_ChecksumMode = 1
	TransferParameters_TARGET  TransferParameters_ChecksumMode = 2
	TransferParameters_END2END TransferParameters_ChecksumMode = 3
)

var TransferParameters_ChecksumMode_name = map[int32]string{
	0: "NONE",
	1: "SOURCE",
	2: "TARGET",
	3: "END2END",
}
var TransferParameters_ChecksumMode_value = map[string]int32{
	"NONE":    0,
	"SOURCE":  1,
	"TARGET":  2,
	"END2END": 3,
}

func (x TransferParameters_ChecksumMode) String() string {
	return proto.EnumName(TransferParameters_ChecksumMode_name, int32(x))
}
func (TransferParameters_ChecksumMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor4, []int{0, 0}
}

// 	Submitted -> Ready -> Active -> Finished/Failed
// Optionally, if staging is required
// 	Staging -> Started -> [Submitted -> Ready -> Active] -> Finished/Failed
type Transfer_State int32

const (
	Transfer_STAGING         Transfer_State = 0
	Transfer_STAGING_STARTED Transfer_State = 1
	Transfer_SUBMITTED       Transfer_State = 2
	Transfer_ACTIVE          Transfer_State = 3
	Transfer_FINISHED        Transfer_State = 4
	Transfer_FAILED          Transfer_State = 5
	Transfer_CANCELED        Transfer_State = 6
	Transfer_ON_HOLD         Transfer_State = 10
	Transfer_UNUSED          Transfer_State = 11
)

var Transfer_State_name = map[int32]string{
	0:  "STAGING",
	1:  "STAGING_STARTED",
	2:  "SUBMITTED",
	3:  "ACTIVE",
	4:  "FINISHED",
	5:  "FAILED",
	6:  "CANCELED",
	10: "ON_HOLD",
	11: "UNUSED",
}
var Transfer_State_value = map[string]int32{
	"STAGING":         0,
	"STAGING_STARTED": 1,
	"SUBMITTED":       2,
	"ACTIVE":          3,
	"FINISHED":        4,
	"FAILED":          5,
	"CANCELED":        6,
	"ON_HOLD":         10,
	"UNUSED":          11,
}

func (x Transfer_State) String() string {
	return proto.EnumName(Transfer_State_name, int32(x))
}
func (Transfer_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{1, 0} }

// TransferParameters determines the transfer behaviour
type TransferParameters struct {
	// If true, there will be no preparatory, nor validation, steps
	OnlyCopy bool `protobuf:"varint,1,opt,name=only_copy,json=onlyCopy" json:"only_copy,omitempty"`
	// TCP buffer size
	TcpBufferSize uint32 `protobuf:"varint,2,opt,name=tcp_buffer_size,json=tcpBufferSize" json:"tcp_buffer_size,omitempty"`
	// Number of TCP connections if supported by the protocol
	Nstreams uint32 `protobuf:"varint,3,opt,name=nstreams" json:"nstreams,omitempty"`
	// Transfer timeout, in seconds
	Timeout *google_protobuf1.Duration `protobuf:"bytes,4,opt,name=timeout" json:"timeout,omitempty"`
	// Number of times to retry on recoverable failure
	Retry uint32 `protobuf:"varint,5,opt,name=retry" json:"retry,omitempty"`
	// How long to wait between attempts
	RetryDelay *google_protobuf1.Duration `protobuf:"bytes,6,opt,name=retry_delay,json=retryDelay" json:"retry_delay,omitempty"`
	// Staging operation timeout, to be enforced by the storage
	StagingTimeout *google_protobuf1.Duration `protobuf:"bytes,7,opt,name=staging_timeout,json=stagingTimeout" json:"staging_timeout,omitempty"`
	// How long should the storage keep the file on disk
	PinLifetime *google_protobuf1.Duration `protobuf:"bytes,8,opt,name=pin_lifetime,json=pinLifetime" json:"pin_lifetime,omitempty"`
	// Source space token, for staging operations
	SourceSpacetoken string `protobuf:"bytes,9,opt,name=source_spacetoken,json=sourceSpacetoken" json:"source_spacetoken,omitempty"`
	// Destination space token, for the transfer
	DestSpacetoken string                          `protobuf:"bytes,10,opt,name=dest_spacetoken,json=destSpacetoken" json:"dest_spacetoken,omitempty"`
	ChecksumMode   TransferParameters_ChecksumMode `protobuf:"varint,11,opt,name=checksum_mode,json=checksumMode,enum=messages.TransferParameters_ChecksumMode" json:"checksum_mode,omitempty"`
	// Overwrite the file if it exists
	Overwrite bool `protobuf:"varint,12,opt,name=overwrite" json:"overwrite,omitempty"`
	// Enable UDT
	EnableUdt bool `protobuf:"varint,13,opt,name=enable_udt,json=enableUdt" json:"enable_udt,omitempty"`
	// Enable IPv6
	EnableIpv6 bool `protobuf:"varint,14,opt,name=enable_ipv6,json=enableIpv6" json:"enable_ipv6,omitempty"`
	// Max time on the queue
	QueueTimeout *google_protobuf1.Duration `protobuf:"bytes,15,opt,name=queue_timeout,json=queueTimeout" json:"queue_timeout,omitempty"`
}

func (m *TransferParameters) Reset()                    { *m = TransferParameters{} }
func (m *TransferParameters) String() string            { return proto.CompactTextString(m) }
func (*TransferParameters) ProtoMessage()               {}
func (*TransferParameters) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *TransferParameters) GetOnlyCopy() bool {
	if m != nil {
		return m.OnlyCopy
	}
	return false
}

func (m *TransferParameters) GetTcpBufferSize() uint32 {
	if m != nil {
		return m.TcpBufferSize
	}
	return 0
}

func (m *TransferParameters) GetNstreams() uint32 {
	if m != nil {
		return m.Nstreams
	}
	return 0
}

func (m *TransferParameters) GetTimeout() *google_protobuf1.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *TransferParameters) GetRetry() uint32 {
	if m != nil {
		return m.Retry
	}
	return 0
}

func (m *TransferParameters) GetRetryDelay() *google_protobuf1.Duration {
	if m != nil {
		return m.RetryDelay
	}
	return nil
}

func (m *TransferParameters) GetStagingTimeout() *google_protobuf1.Duration {
	if m != nil {
		return m.StagingTimeout
	}
	return nil
}

func (m *TransferParameters) GetPinLifetime() *google_protobuf1.Duration {
	if m != nil {
		return m.PinLifetime
	}
	return nil
}

func (m *TransferParameters) GetSourceSpacetoken() string {
	if m != nil {
		return m.SourceSpacetoken
	}
	return ""
}

func (m *TransferParameters) GetDestSpacetoken() string {
	if m != nil {
		return m.DestSpacetoken
	}
	return ""
}

func (m *TransferParameters) GetChecksumMode() TransferParameters_ChecksumMode {
	if m != nil {
		return m.ChecksumMode
	}
	return TransferParameters_NONE
}

func (m *TransferParameters) GetOverwrite() bool {
	if m != nil {
		return m.Overwrite
	}
	return false
}

func (m *TransferParameters) GetEnableUdt() bool {
	if m != nil {
		return m.EnableUdt
	}
	return false
}

func (m *TransferParameters) GetEnableIpv6() bool {
	if m != nil {
		return m.EnableIpv6
	}
	return false
}

func (m *TransferParameters) GetQueueTimeout() *google_protobuf1.Duration {
	if m != nil {
		return m.QueueTimeout
	}
	return nil
}

// Transfer to be run by FTS
type Transfer struct {
	State Transfer_State `protobuf:"varint,1,opt,name=state,enum=messages.Transfer_State" json:"state,omitempty"`
	// Job to which this transfer belongs
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	// Transfer id
	TransferId string `protobuf:"bytes,3,opt,name=transfer_id,json=transferId" json:"transfer_id,omitempty"`
	// Retry attempt
	Retry uint32 `protobuf:"varint,4,opt,name=retry" json:"retry,omitempty"`
	// Expiration time
	ExpirationTime *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
	// Source file
	Source string `protobuf:"bytes,6,opt,name=source" json:"source,omitempty"`
	// Destination file
	Destination string `protobuf:"bytes,7,opt,name=destination" json:"destination,omitempty"`
	// File size, specified by the user
	Filesize uint64 `protobuf:"varint,8,opt,name=filesize" json:"filesize,omitempty"`
	// File checksum, as type:value (i.e. adler32:12345)
	Checksum string `protobuf:"bytes,9,opt,name=checksum" json:"checksum,omitempty"`
	// Parameters for the transfer
	Parameters *TransferParameters `protobuf:"bytes,10,opt,name=parameters" json:"parameters,omitempty"`
	// Custom metadata
	Metadata []byte `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Information for when it i sdone
	Info *TransferInfo `protobuf:"bytes,12,opt,name=info" json:"info,omitempty"`
}

func (m *Transfer) Reset()                    { *m = Transfer{} }
func (m *Transfer) String() string            { return proto.CompactTextString(m) }
func (*Transfer) ProtoMessage()               {}
func (*Transfer) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *Transfer) GetState() Transfer_State {
	if m != nil {
		return m.State
	}
	return Transfer_STAGING
}

func (m *Transfer) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *Transfer) GetTransferId() string {
	if m != nil {
		return m.TransferId
	}
	return ""
}

func (m *Transfer) GetRetry() uint32 {
	if m != nil {
		return m.Retry
	}
	return 0
}

func (m *Transfer) GetExpirationTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

func (m *Transfer) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Transfer) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *Transfer) GetFilesize() uint64 {
	if m != nil {
		return m.Filesize
	}
	return 0
}

func (m *Transfer) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *Transfer) GetParameters() *TransferParameters {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Transfer) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Transfer) GetInfo() *TransferInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*TransferParameters)(nil), "messages.TransferParameters")
	proto.RegisterType((*Transfer)(nil), "messages.Transfer")
	proto.RegisterEnum("messages.TransferParameters_ChecksumMode", TransferParameters_ChecksumMode_name, TransferParameters_ChecksumMode_value)
	proto.RegisterEnum("messages.Transfer_State", Transfer_State_name, Transfer_State_value)
}

func init() { proto.RegisterFile("transfer.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 776 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x53, 0xdf, 0x8f, 0xdb, 0x44,
	0x10, 0xae, 0xef, 0x92, 0x9c, 0x3d, 0xce, 0x0f, 0xb3, 0xd0, 0xca, 0x1c, 0x85, 0x46, 0xf7, 0x00,
	0x01, 0x24, 0x57, 0x4a, 0xa5, 0x3e, 0xa0, 0x82, 0x94, 0x8b, 0xdd, 0xab, 0xa5, 0xab, 0x0f, 0xad,
	0x1d, 0x5e, 0x2d, 0xc7, 0xde, 0x84, 0x6d, 0x63, 0xaf, 0xb1, 0xd7, 0x07, 0xb9, 0x37, 0x1e, 0xf8,
	0xf3, 0xf8, 0x9f, 0xd0, 0xae, 0x7f, 0x5c, 0x44, 0xa4, 0xe6, 0xcd, 0xdf, 0x7c, 0xdf, 0x8c, 0x67,
	0x67, 0xbe, 0x81, 0x31, 0x2f, 0xa2, 0xac, 0xdc, 0x90, 0xc2, 0xca, 0x0b, 0xc6, 0x19, 0x52, 0x53,
	0x52, 0x96, 0xd1, 0x96, 0x94, 0x97, 0x4f, 0x5b, 0x26, 0x2c, 0x79, 0xc4, 0xab, 0xb2, 0x16, 0x5c,
	0x7e, 0xb3, 0x65, 0x6c, 0xbb, 0x23, 0x2f, 0x25, 0x5a, 0x57, 0x9b, 0x97, 0x49, 0x55, 0x44, 0x9c,
	0xb2, 0xac, 0xe1, 0x5f, 0xfc, 0x9f, 0xe7, 0x34, 0x25, 0x25, 0x8f, 0xd2, 0xbc, 0x16, 0x5c, 0xfd,
	0x3d, 0x00, 0x14, 0x34, 0xa5, 0x7f, 0x8d, 0x8a, 0x28, 0x25, 0x9c, 0x14, 0x25, 0xfa, 0x0a, 0x34,
	0x96, 0xed, 0xf6, 0x61, 0xcc, 0xf2, 0xbd, 0xa9, 0x4c, 0x95, 0x99, 0x8a, 0x55, 0x11, 0x58, 0xb2,
	0x7c, 0x8f, 0xbe, 0x85, 0x09, 0x8f, 0xf3, 0x70, 0x5d, 0x6d, 0x64, 0x3f, 0xf4, 0x81, 0x98, 0x67,
	0x53, 0x65, 0x36, 0xc2, 0x23, 0x1e, 0xe7, 0xd7, 0x32, 0xea, 0xd3, 0x07, 0x82, 0x2e, 0x41, 0xcd,
	0x4a, 0x5e, 0x90, 0x28, 0x2d, 0xcd, 0x73, 0x29, 0xe8, 0x30, 0x7a, 0x05, 0x17, 0xa2, 0x15, 0x56,
	0x71, 0xb3, 0x37, 0x55, 0x66, 0xfa, 0xfc, 0x4b, 0xab, 0x6e, 0xd5, 0x6a, 0x5b, 0xb5, 0xec, 0xe6,
	0x29, 0xb8, 0x55, 0xa2, 0x2f, 0xa0, 0x5f, 0x10, 0x5e, 0xec, 0xcd, 0xbe, 0xac, 0x56, 0x03, 0xf4,
	0x13, 0xe8, 0xf2, 0x23, 0x4c, 0xc8, 0x2e, 0xda, 0x9b, 0x83, 0x53, 0xe5, 0x40, 0xaa, 0x6d, 0x21,
	0x46, 0xd7, 0x30, 0x29, 0x79, 0xb4, 0xa5, 0xd9, 0x36, 0x6c, 0xdb, 0xb9, 0x38, 0x95, 0x3f, 0x6e,
	0x32, 0x82, 0xa6, 0xab, 0x37, 0x30, 0xcc, 0x69, 0x16, 0xee, 0xe8, 0x86, 0x88, 0x1a, 0xa6, 0x7a,
	0xaa, 0x80, 0x9e, 0xd3, 0xec, 0xb6, 0x51, 0xa3, 0x1f, 0xe1, 0xb3, 0x92, 0x55, 0x45, 0x4c, 0xc2,
	0x32, 0x8f, 0x62, 0xc2, 0xd9, 0x47, 0x92, 0x99, 0xda, 0x54, 0x99, 0x69, 0xd8, 0xa8, 0x09, 0xbf,
	0x8b, 0xa3, 0xef, 0x60, 0x92, 0x90, 0x92, 0x1f, 0x4a, 0x41, 0x4a, 0xc7, 0x22, 0x7c, 0x20, 0xf4,
	0x60, 0x14, 0xff, 0x4e, 0xe2, 0x8f, 0x65, 0x95, 0x86, 0x29, 0x4b, 0x88, 0xa9, 0x4f, 0x95, 0xd9,
	0x78, 0xfe, 0xbd, 0xd5, 0x1a, 0xca, 0x3a, 0x5e, 0xba, 0xb5, 0x6c, 0x32, 0xde, 0xb3, 0x84, 0xe0,
	0x61, 0x7c, 0x80, 0xd0, 0x73, 0xd0, 0xd8, 0x3d, 0x29, 0xfe, 0x2c, 0x28, 0x27, 0xe6, 0x50, 0xfa,
	0xe1, 0x31, 0x80, 0xbe, 0x06, 0x20, 0x59, 0xb4, 0xde, 0x91, 0xb0, 0x4a, 0xb8, 0x39, 0xaa, 0xe9,
	0x3a, 0xb2, 0x4a, 0x38, 0x7a, 0x01, 0x7a, 0x43, 0xd3, 0xfc, 0xfe, 0xb5, 0x39, 0x96, 0x7c, 0x93,
	0xe1, 0xe6, 0xf7, 0xaf, 0xd1, 0x2f, 0x30, 0xfa, 0xa3, 0x22, 0x15, 0xe9, 0x76, 0x30, 0x39, 0x35,
	0xc2, 0xa1, 0xd4, 0x37, 0x1b, 0xb8, 0xfa, 0x19, 0x86, 0x87, 0xbd, 0x23, 0x15, 0x7a, 0xde, 0x9d,
	0xe7, 0x18, 0x4f, 0x10, 0xc0, 0xc0, 0xbf, 0x5b, 0xe1, 0xa5, 0x63, 0x28, 0xe2, 0x3b, 0x58, 0xe0,
	0x1b, 0x27, 0x30, 0xce, 0x90, 0x0e, 0x17, 0x8e, 0x67, 0xcf, 0x1d, 0xcf, 0x36, 0xce, 0xaf, 0xfe,
	0xed, 0x81, 0xda, 0x8e, 0x03, 0x59, 0xd0, 0x17, 0x17, 0x46, 0xa4, 0xeb, 0xc7, 0x73, 0xf3, 0x78,
	0x62, 0x96, 0x2f, 0x78, 0x5c, 0xcb, 0xd0, 0x53, 0x18, 0x7c, 0x60, 0xeb, 0x90, 0x26, 0xf2, 0x06,
	0x34, 0xdc, 0xff, 0xc0, 0xd6, 0x6e, 0x22, 0xde, 0xdc, 0x5d, 0x2c, 0x4d, 0xa4, 0xfd, 0x35, 0x0c,
	0x6d, 0xc8, 0x4d, 0x1e, 0xbd, 0xdc, 0x3b, 0xf4, 0xf2, 0x12, 0x26, 0xe4, 0xaf, 0x9c, 0xd6, 0xaf,
	0x94, 0xe3, 0x90, 0x5e, 0xd7, 0xe7, 0x97, 0x47, 0xb3, 0x08, 0xda, 0x4b, 0xc6, 0xe3, 0xc7, 0x14,
	0x11, 0x44, 0xcf, 0x60, 0x50, 0x3b, 0x47, 0xde, 0x82, 0x86, 0x1b, 0x84, 0xa6, 0xa0, 0x0b, 0x9b,
	0xd0, 0x4c, 0x4a, 0xa5, 0xd1, 0x35, 0x7c, 0x18, 0x12, 0x17, 0xbb, 0xa1, 0x3b, 0x22, 0x4f, 0x5a,
	0xd8, 0xb8, 0x87, 0x3b, 0x2c, 0xb8, 0xd6, 0x12, 0x8d, 0x3f, 0x3b, 0x8c, 0xde, 0x00, 0xe4, 0x9d,
	0x8f, 0xa4, 0x25, 0xf5, 0xf9, 0xf3, 0x4f, 0x79, 0x0d, 0x1f, 0xe8, 0x45, 0xe5, 0x94, 0xf0, 0x28,
	0x89, 0x78, 0x24, 0x7d, 0x3a, 0xc4, 0x1d, 0x46, 0x3f, 0x40, 0x8f, 0x66, 0x1b, 0x26, 0x3d, 0xa7,
	0xcf, 0x9f, 0x1d, 0xd7, 0x74, 0xb3, 0x0d, 0xc3, 0x52, 0x73, 0xf5, 0x8f, 0x02, 0x7d, 0xb9, 0x1b,
	0xb1, 0x5e, 0x3f, 0x58, 0xdc, 0xb8, 0xde, 0x8d, 0xf1, 0x04, 0x7d, 0x0e, 0x93, 0x06, 0x84, 0x7e,
	0xb0, 0xc0, 0x81, 0x63, 0x1b, 0x0a, 0x1a, 0x81, 0xe6, 0xaf, 0xae, 0xdf, 0xbb, 0x81, 0x80, 0x67,
	0xc2, 0x1b, 0x8b, 0x65, 0xe0, 0xfe, 0xe6, 0x18, 0xe7, 0x68, 0x08, 0xea, 0x5b, 0xd7, 0x73, 0xfd,
	0x77, 0x8e, 0x6d, 0xf4, 0x04, 0xf3, 0x76, 0xe1, 0xde, 0x3a, 0xb6, 0xd1, 0x17, 0xcc, 0x72, 0xe1,
	0x2d, 0x1d, 0x81, 0x06, 0xe2, 0x27, 0x77, 0x5e, 0xf8, 0xee, 0xee, 0xd6, 0x36, 0x40, 0xc8, 0x56,
	0xde, 0xca, 0x77, 0x6c, 0x43, 0x5f, 0x0f, 0xe4, 0x8e, 0x5e, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff,
	0xef, 0x9a, 0x4d, 0x7e, 0xce, 0x05, 0x00, 0x00,
}
